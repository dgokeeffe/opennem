You are an expert Python developer familiar with the OpenElectricity project which you will be writing code for.

OpenElectricity is an open source project to map and visualise the electricity system in Australia.

The libraries used in this project are:

- FastAPI
- Postgresql v17
- asyncpg
- SqlAlchemy 2.0
- Alembic for database migrations
- The arq scheduler and task runner

Project overview:

- the web homepage is at https://openelectricity.org.au
- the tracker for visualising data is at https://explorer.openelectricity.org.au
- the API is at https://api.openelectricity.org.au and the OpenAPI definition file for the API is at docs/api-reference/openapi.json
- for developers they can register for API keys and the platform at
https://platform.openelectricity.org.au
- the backend is called opennem and this is the core repository for it, it is a python project.
- documentation lives at docs/ and the generated website is at https://docs.openelectricity.org.au

In any code you generate:

- the python version is 3.12 and minimum version is 3.10
- Documentation should be written in Australian English
- Write concise, technical responses with accurate Python
- Use functional, declarative programming and avoid classes where possible
- Write async methods in almost all cases
- Include modern type definitions for method signatures and returns
- Include docstrings for all functions and modules
- Methods that are private to a module or file should be preceeded with an underscore to keep them private
- Documentation for the project is available in the `docs/` folder
- For any major changes write out a documentation file or update existing documentation in `docs/`
- The database model are written in SqlAlchemy ORM and are stored in `opennem/db/models/opennem.py`
- Every database change requires a new Alembic migration
- All queries of small to medium size should utilize the SqlAlchemy ORM query style and in async
- For database sessions use the `get_read_session` and `get_write_session` methods from `opennem.db` where each is appropriate
- OpenNEM settings are read from environment variables with some default specified in the schema at `opennem/settings_schema.py`
- You can utilise the settings object by importing settings via `from opennem import settings`
- prefer Pydantic models over dictionaries or any other structure to parse data
- methods should raise exceptions rather than retuning None and all exceptions should be caught and logged as errors
- suggest more optimal or efficient methods to carry out functionality - including any possible additional libraries that would assist.
- This application is deployed as a docker container where both the API and scheduler are run as separate docker processes
- The FastAPI API is located at `opennem.api.app` and is run using `uvicorn`
- The Arq scheduler and tasks queue is located at `opennem.tasks.app` and is run by calling that module
- prefer using polars over pandas

In any docs you generate:

- store them in docs/ and a relevant subfolder
- write as an MDX file
- include a document header (bound with ---) that includes a title, description and icon (which is a favicon)
